<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_page_attachments().
 */
function upchuk_theme_helper_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'upchuk_theme_helper/upchuk_theme_helper';
}

/**
 * Implements hook_theme().
 */
function upchuk_theme_helper_theme() {
  $return = array();

  $return['grid'] = [
    'variables' => [
      'columns' => [],
      'classes' => [],
      'container' => NULL,
      'alignment' => ''
    ]
  ];

  $return['slick_carousel'] = [
    'variables' => [
      'items' => [],
      'settings' => [],
      'slick_id' => NULL,
      'nav' => [],
    ]
  ];

  $return['address_wrapper'] = [
    'variables' => [
      'children' => NULL,
      'attributes' => [],
      'title' => [],
    ],
    'path' => \Drupal::service('extension.path.resolver')->getPathname('module', 'upchuk_theme_helper') . '/templates/form',
  ];

  $return['bootstrap_tabs'] = [
    'variables' => [
      'tabs' => [],
      'items' => [],
      'tabs_id' => NULL,
      'active_index' => 0,
      'attributes' => [],
    ],
  ];

  $return['bootstrap_accordion'] = [
    'variables' => [
      'accordion_id' => NULL,
      'items' => [],
      'active_index' => 0,
      'attributes' => [],
    ],
  ];


  return $return;
}

/**
 * Implements hook_theme_registry_alter().
 */
function upchuk_theme_helper_theme_registry_alter(&$theme_registry) {
  $theme_registry['image_style']['variables']['zoom'] = FALSE;
  $theme_registry['image']['variables']['zoom'] = FALSE;
}

/**
 * Implements template_preprocess_slick_carousel().
 *
 * Variables for the Slick carousel.
 */
function upchuk_theme_helper_preprocess_slick_carousel(&$vars) {
  $settings = $vars['settings'];
  $vars['#attached'] = [
    'library' => ['upchuk_theme_helper/slick'],
  ];

  $vars['#attached']['drupalSettings']['slick'][$vars['slick_id']] = [
    'slick_id' => $vars['slick_id'],
    'settings' => (object) $settings,
  ];

  if ($vars['nav']) {
    $settings = isset($vars['nav']['settings']) ? $vars['nav']['settings'] : [];
    $vars['#attached']['drupalSettings']['slick'][$vars['slick_id']]['nav'] = [
      'slick_id' => $vars['nav']['slick_id'],
      'settings' => (object) $settings,
    ];
  }
}

/**
 * Implements template_preprocess_fieldset().
 */
function upchuk_theme_helper_preprocess_fieldset(&$vars) {
  $was_object = $vars['attributes'] instanceof Attribute;
  $attributes = $vars['attributes'] instanceof Attribute ? $vars['attributes'] : new Attribute($vars['attributes']);
  $attributes->addClass(['form-group']);
  if (isset($vars['element']['#type']) && $vars['element']['#type'] === 'webform_address') {
    $attributes->addClass(['border', 'pl-3', 'pr-3']);
  }
  $vars['attributes'] = $attributes;
  if (!$was_object) {
    $vars['attributes'] = $attributes->toArray();
  }
}

/**
 * Implements template_preprocess_form_element().
 */
function upchuk_theme_helper_preprocess_form_element(&$vars) {
  $was_object = $vars['attributes'] instanceof Attribute;
  $attributes = $vars['attributes'] instanceof Attribute ? $vars['attributes'] : new Attribute($vars['attributes']);
  $attributes->addClass(['form-group']);
  $vars['attributes'] = $attributes;

  /** @var Attribute $input_attributes */
  $input_attributes = isset($vars['input_attributes']) && $vars['input_attributes'] instanceof Attribute ? $vars['input_attributes'] : NULL;
  if (!$input_attributes) {
    return;
  }
  if ($input_attributes->hasClass('error')) {
    $input_attributes->addClass('is-invalid');
  }
  if (!$was_object) {
    $vars['attributes'] = $attributes->toArray();
  }
}

/**
 * Implements hook_form_alter().
 */
function upchuk_theme_helper_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!isset(\Drupal::theme()
      ->getActiveTheme()
      ->getBaseThemeExtensions()['bootstrap_barrio'])) {
    return;
  }

  upchuk_theme_helper_text_format_apply_after_build($form);

  if (in_array($form_id, ['user_login_form', 'user_pass'])) {
    if (isset($form['mail'])) {
      $form['mail'] = [
        '#type' => 'container',
        '#attributes' => ['class' => ['form-group']],
        0 => $form['mail']
      ];
    }
  }
}

/**
 * Applies the after build function to text_format elements inside a form.
 *
 * @param $form
 */
function upchuk_theme_helper_text_format_apply_after_build(&$form) {
  $children = Element::children($form);
  foreach ($children as $child) {
    if (isset($form[$child]['#type']) && $form[$child]['#type'] === 'text_format') {
      $form[$child]['#after_build'][] = 'upchuk_theme_helper_text_format_after_build';
      continue;
    }

    if (Element::children($form[$child])) {
      upchuk_theme_helper_text_format_apply_after_build($form[$child]);
    }
  }
}

/**
 * After build callback for the text_format form elements.
 */
function upchuk_theme_helper_text_format_after_build($element, FormStateInterface $formState) {
  if (isset($element['format'])) {
    $element['format']['guidelines']['#access'] = FALSE;
    $element['format']['help']['#access'] = FALSE;
    $element['format']['#attributes']['class'] = [];
  }

  return $element;
}

/**
 * Implements template_preprocess_image_style().
 */
function upchuk_theme_helper_preprocess_image_style(&$variables) {
  if (isset($variables['image']['#width'])) {
    unset($variables['image']['#width']);
  }
  if (isset($variables['image']['#height'])) {
    unset($variables['image']['#height']);
  }

  if ($variables['zoom'] === TRUE) {
    $variables['image']['#zoom'] = TRUE;
  }
}

/**
 * Implements template_preprocess_image_formatter().
 */
function upchuk_theme_helper_preprocess_image_formatter(&$variables) {
  // We don't want forced width and height on images.
  if (isset($variables['image']['#width'])) {
    unset($variables['image']['#width']);
  }
  if (isset($variables['image']['#height'])) {
    unset($variables['image']['#height']);
  }
}

/**
 * Implements hook_element_info_alter().
 */
function upchuk_theme_helper_element_info_alter(array &$info) {
  if (isset($info['commerce_price'])) {
    $info['commerce_price']['#process'][] = 'upchuk_theme_helper_commerce_price_process';
  }
}

/**
 * Commerce Price element process callback.
 */
function upchuk_theme_helper_commerce_price_process($element) {
  if (isset($element['#bootstrap_col'])) {
    $element['number']['#bootstrap_col'] = $element['#bootstrap_col'];
  }

  return $element;
}

/**
 * Implements theme_suggestions_image_alter().
 */
function upchuk_theme_helper_theme_suggestions_image_alter(array &$suggestions, array $variables) {
  if (!$variables['zoom']) {
    return;
  }

  $suggestions[] = 'image__zoom';
}

/**
 * Implements template_preprocess_image().
 */
function upchuk_theme_helper_preprocess_image(&$variables) {
  if (!$variables['zoom']) {
    return;
  }

  $variables['#attached'] = [
    'library' => ['upchuk_theme_helper/zoom'],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for the views exposed form.
 */
function upchuk_theme_helper_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state) {
  if (isset($form['actions'])) {
    $form['actions']['#attributes']['class'][] = 'col-auto';
    $form['actions']['#attributes']['class'][] = 'form-group';
  }
}

/**
 * Implements template_process_field().
 */
function upchuk_theme_helper_preprocess_field(&$vars) {
  if ($vars['field_name'] === 'field_media_oembed_video') {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $vars['element']['#object'];
    foreach ($vars['items'] as $delta => &$item) {
      $width = $item['content']['#attributes']['width'];
      $url = $entity->get('field_media_oembed_video')->get($delta)->value;
      $resource_url = \Drupal::service('media.oembed.url_resolver')
        ->getResourceUrl($url, $width, 0);
      $resource = \Drupal::service('media.oembed.resource_fetcher')
        ->fetchResource($resource_url);
      if ($resource instanceof \Drupal\media\OEmbed\Resource) {
        $ratio = $resource->getWidth() / $resource->getHeight();
        $new_height = round($width / $ratio);
        $item['content']['#attributes']['height'] = $new_height;
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK()_alter.
 */
function upchuk_theme_helper_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {
  $suggestions = [];
  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'taxonomy_term__' . $sanitized_view_mode;
  $suggestions[] = 'taxonomy_term__' . $term->bundle();
  $suggestions[] = 'taxonomy_term__' . $term->bundle() . '__' . $sanitized_view_mode;

  return $suggestions;
}
